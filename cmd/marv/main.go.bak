
// Main

// ctx, cancelFunc := context.WithCancel(context.Background())
// defer cancelFunc()

// messages := marv.StartServer(ctx, 3737)
// commands := marv.StartMotors(ctx)

// for {
// 	select {
// 	case message := <-messages:
// 		commands <- messageToCommand(message)
// 	case <-ctx.Done():
// 		return
// 	}
// }

// // SetSpeed NEEDSCOMMENT
// func SetSpeed(motor *gpio.MotorDriver, speed float64) {
// 	absSpeed := int(math.Abs(speed) * 1024)
// 	bSpeed := byte(absSpeed)

// 	if bSpeed == 0 {
// 		motor.Off()
// 	} else if bSpeed > 0 {
// 		motor.Forward(bSpeed)
// 	} else if bSpeed < 0 {
// 		motor.Backward(bSpeed)
// 	}
// }

// // Right NEEDSCOMMENT
// func Right(speed float64) {

// }

// func messageToCommand(message *marv.Message) *marv.Command {
// 	log.Println("Received message", message)
// 	return &marv.Command{}
// }
